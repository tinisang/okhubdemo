import { Header } from "./Header/Header";
import { Footer } from "./Footer/Footer";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState, useRef } from "react";

import { motion, AnimatePresence } from "framer-motion"
import gsap from "gsap";

import ScrollTrigger from "gsap/dist/ScrollTrigger";
import loadingImage from '../public/imgs/Infinity-1s-200px.svg'
import Image from "next/image";
import { LocomotiveScrollProvider, useLocomotiveScroll } from "react-locomotive-scroll";
import { ScrollTriggerProxy } from "./ScrollTriggerProxy";
import { Refresh } from "./RefreshScrollTriger";
import { HeaderMobile } from "./Header/HeaderMobile";
import { FooterMobile } from "./Footer/FooterMobile";



export const Base = (props) => {
  // console.log(props)
  
  const containerRef = useRef(null)
  const [loading, isLoading] = useState(false)
  const router = useRouter()
  const {scroll: locoScroll} = useLocomotiveScroll()
  const path = useRef(router.asPath)

  useEffect(()=>{
    router.events.on('routeChangeStart', (url, { shallow }) => {
      
      
      if (router.asPath != url  && !url.includes('?')){
        isLoading(true)

      }
    });
    router.events.on('routeChangeComplete', (url, { shallow }) => {
      isLoading(false)



      
          
    });
    
  },[])
  useEffect(()=>{
    // console.log('change')
    return()=>{
    }
  })
  
  
  // const handleComplete = ()=>{

  // }


const [isMobile, setIsMobile] = useState();

useEffect(() => {
  const mediaQuery = window.matchMedia("(max-width: 768px)");
  if (mediaQuery.matches) {
    setIsMobile(true);
  } else setIsMobile(false);

  window.addEventListener("resize", () => {
    if (mediaQuery.matches) {
      setIsMobile(true);
    } else setIsMobile(false);
  });
}, []);
  return (
    <>

    
    <Head>
      <title>OKHUB</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/imgs/logo.svg" />
    </Head>
    
          {
            loading && (
            <motion.div 
            key={'loading-section'}
            className="loading-section"
            initial={{opacity:0}}
            animate={{opacity:1}}
            exit={{opacity:0}}
            // onAnimationComplete={handleComplete}

            >
              <Image src={loadingImage} alt='' />
            </motion.div>

            )
          }
 


            <LocomotiveScrollProvider
            options={
              {
                smooth: true,
                lerp:0.1,
                getSpeed: true
                // ... all available Locomotive Scroll instance options 
              }
            }
            watch={
              [
                //..all the dependencies you want to watch to update the scroll.
                //  Basicaly, you would want to watch page/location changes
                //  For exemple, on Next.js you would want to watch properties like `router.asPath` (you may want to add more criterias if the instance should be update on locations with query parameters)
              ]
            }
            location={router.asPath}
            containerRef={containerRef}
            onLocationChange={scroll => scroll.scrollTo(0, { duration: 0, disableLerp: true })}
           
          >
            <main data-scroll-container ref={containerRef}>

           {
             isMobile == false ?  <Header/> : <HeaderMobile/>
           }
              {props.children}
              {
                isMobile == false ? <Footer/> : <FooterMobile/>
              }

              <Refresh/>
            </main>
          </LocomotiveScrollProvider>
       

         



   
 
    </>
  );
};
